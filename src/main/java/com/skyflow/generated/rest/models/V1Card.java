/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * Card metadata of the requested BIN.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class V1Card {
  public static final String SERIALIZED_NAME_B_I_N = "BIN";
  @SerializedName(SERIALIZED_NAME_B_I_N)
  private String BIN;

  public static final String SERIALIZED_NAME_ISSUER_NAME = "issuer_name";
  @SerializedName(SERIALIZED_NAME_ISSUER_NAME)
  private String issuerName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CARD_TYPE = "card_type";
  @SerializedName(SERIALIZED_NAME_CARD_TYPE)
  private String cardType;

  public static final String SERIALIZED_NAME_CARD_CATEGORY = "card_category";
  @SerializedName(SERIALIZED_NAME_CARD_CATEGORY)
  private String cardCategory;

  public static final String SERIALIZED_NAME_CARD_SCHEME = "card_scheme";
  @SerializedName(SERIALIZED_NAME_CARD_SCHEME)
  private String cardScheme;

  public static final String SERIALIZED_NAME_CARD_LAST_FOUR_DIGITS = "card_last_four_digits";
  @SerializedName(SERIALIZED_NAME_CARD_LAST_FOUR_DIGITS)
  private String cardLastFourDigits;

  public static final String SERIALIZED_NAME_CARD_EXPIRY = "card_expiry";
  @SerializedName(SERIALIZED_NAME_CARD_EXPIRY)
  private String cardExpiry;

  public V1Card() {
  }

  public V1Card BIN(String BIN) {
    this.BIN = BIN;
    return this;
  }

  /**
   * BIN of the card.
   * @return BIN
   */
  @javax.annotation.Nullable
  public String getBIN() {
    return BIN;
  }

  public void setBIN(String BIN) {
    this.BIN = BIN;
  }


  public V1Card issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

  /**
   * Name of the card issuer bank.
   * @return issuerName
   */
  @javax.annotation.Nullable
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }


  public V1Card countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country code of the card.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public V1Card currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of the card.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public V1Card cardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  /**
   * Type of the card.
   * @return cardType
   */
  @javax.annotation.Nullable
  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }


  public V1Card cardCategory(String cardCategory) {
    this.cardCategory = cardCategory;
    return this;
  }

  /**
   * Category of the card.
   * @return cardCategory
   */
  @javax.annotation.Nullable
  public String getCardCategory() {
    return cardCategory;
  }

  public void setCardCategory(String cardCategory) {
    this.cardCategory = cardCategory;
  }


  public V1Card cardScheme(String cardScheme) {
    this.cardScheme = cardScheme;
    return this;
  }

  /**
   * Scheme of the card.
   * @return cardScheme
   */
  @javax.annotation.Nullable
  public String getCardScheme() {
    return cardScheme;
  }

  public void setCardScheme(String cardScheme) {
    this.cardScheme = cardScheme;
  }


  public V1Card cardLastFourDigits(String cardLastFourDigits) {
    this.cardLastFourDigits = cardLastFourDigits;
    return this;
  }

  /**
   * Last four digits of the card number.
   * @return cardLastFourDigits
   */
  @javax.annotation.Nullable
  public String getCardLastFourDigits() {
    return cardLastFourDigits;
  }

  public void setCardLastFourDigits(String cardLastFourDigits) {
    this.cardLastFourDigits = cardLastFourDigits;
  }


  public V1Card cardExpiry(String cardExpiry) {
    this.cardExpiry = cardExpiry;
    return this;
  }

  /**
   * Expiry date of the card.
   * @return cardExpiry
   */
  @javax.annotation.Nullable
  public String getCardExpiry() {
    return cardExpiry;
  }

  public void setCardExpiry(String cardExpiry) {
    this.cardExpiry = cardExpiry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1Card v1Card = (V1Card) o;
    return Objects.equals(this.BIN, v1Card.BIN) &&
        Objects.equals(this.issuerName, v1Card.issuerName) &&
        Objects.equals(this.countryCode, v1Card.countryCode) &&
        Objects.equals(this.currency, v1Card.currency) &&
        Objects.equals(this.cardType, v1Card.cardType) &&
        Objects.equals(this.cardCategory, v1Card.cardCategory) &&
        Objects.equals(this.cardScheme, v1Card.cardScheme) &&
        Objects.equals(this.cardLastFourDigits, v1Card.cardLastFourDigits) &&
        Objects.equals(this.cardExpiry, v1Card.cardExpiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(BIN, issuerName, countryCode, currency, cardType, cardCategory, cardScheme, cardLastFourDigits, cardExpiry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1Card {\n");
    sb.append("    BIN: ").append(toIndentedString(BIN)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    cardCategory: ").append(toIndentedString(cardCategory)).append("\n");
    sb.append("    cardScheme: ").append(toIndentedString(cardScheme)).append("\n");
    sb.append("    cardLastFourDigits: ").append(toIndentedString(cardLastFourDigits)).append("\n");
    sb.append("    cardExpiry: ").append(toIndentedString(cardExpiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BIN");
    openapiFields.add("issuer_name");
    openapiFields.add("country_code");
    openapiFields.add("currency");
    openapiFields.add("card_type");
    openapiFields.add("card_category");
    openapiFields.add("card_scheme");
    openapiFields.add("card_last_four_digits");
    openapiFields.add("card_expiry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1Card
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1Card is not found in the empty JSON string", V1Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BIN") != null && !jsonObj.get("BIN").isJsonNull()) && !jsonObj.get("BIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BIN").toString()));
      }
      if ((jsonObj.get("issuer_name") != null && !jsonObj.get("issuer_name").isJsonNull()) && !jsonObj.get("issuer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer_name").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("card_type") != null && !jsonObj.get("card_type").isJsonNull()) && !jsonObj.get("card_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_type").toString()));
      }
      if ((jsonObj.get("card_category") != null && !jsonObj.get("card_category").isJsonNull()) && !jsonObj.get("card_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_category").toString()));
      }
      if ((jsonObj.get("card_scheme") != null && !jsonObj.get("card_scheme").isJsonNull()) && !jsonObj.get("card_scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_scheme").toString()));
      }
      if ((jsonObj.get("card_last_four_digits") != null && !jsonObj.get("card_last_four_digits").isJsonNull()) && !jsonObj.get("card_last_four_digits").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_last_four_digits` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_last_four_digits").toString()));
      }
      if ((jsonObj.get("card_expiry") != null && !jsonObj.get("card_expiry").isJsonNull()) && !jsonObj.get("card_expiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_expiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_expiry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1Card.class));

       return (TypeAdapter<T>) new TypeAdapter<V1Card>() {
           @Override
           public void write(JsonWriter out, V1Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1Card given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1Card
   * @throws IOException if the JSON string is invalid with respect to V1Card
   */
  public static V1Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1Card.class);
  }

  /**
   * Convert an instance of V1Card to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

