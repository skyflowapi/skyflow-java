/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.skyflow.generated.rest.models.AuditEventAuditResourceType;
import com.skyflow.generated.rest.models.AuditEventData;
import com.skyflow.generated.rest.models.AuditEventHTTPInfo;
import com.skyflow.generated.rest.models.RequestActionType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * Contains fields for defining Request Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class V1AuditResponseEventRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private AuditEventData data;

  public static final String SERIALIZED_NAME_API_NAME = "apiName";
  @SerializedName(SERIALIZED_NAME_API_NAME)
  private String apiName;

  public static final String SERIALIZED_NAME_WORKSPACE_I_D = "workspaceID";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_I_D)
  private String workspaceID;

  public static final String SERIALIZED_NAME_VAULT_I_D = "vaultID";
  @SerializedName(SERIALIZED_NAME_VAULT_I_D)
  private String vaultID;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private RequestActionType actionType = RequestActionType.NONE;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private AuditEventAuditResourceType resourceType = AuditEventAuditResourceType.NONE_API;

  public static final String SERIALIZED_NAME_HTTP_INFO = "httpInfo";
  @SerializedName(SERIALIZED_NAME_HTTP_INFO)
  private AuditEventHTTPInfo httpInfo;

  public V1AuditResponseEventRequest() {
  }

  public V1AuditResponseEventRequest data(AuditEventData data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public AuditEventData getData() {
    return data;
  }

  public void setData(AuditEventData data) {
    this.data = data;
  }


  public V1AuditResponseEventRequest apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * API name.
   * @return apiName
   */
  @javax.annotation.Nullable
  public String getApiName() {
    return apiName;
  }

  public void setApiName(String apiName) {
    this.apiName = apiName;
  }


  public V1AuditResponseEventRequest workspaceID(String workspaceID) {
    this.workspaceID = workspaceID;
    return this;
  }

  /**
   * The workspaceID (if any) of the request.
   * @return workspaceID
   */
  @javax.annotation.Nullable
  public String getWorkspaceID() {
    return workspaceID;
  }

  public void setWorkspaceID(String workspaceID) {
    this.workspaceID = workspaceID;
  }


  public V1AuditResponseEventRequest vaultID(String vaultID) {
    this.vaultID = vaultID;
    return this;
  }

  /**
   * The vaultID (if any) of the request.
   * @return vaultID
   */
  @javax.annotation.Nullable
  public String getVaultID() {
    return vaultID;
  }

  public void setVaultID(String vaultID) {
    this.vaultID = vaultID;
  }


  public V1AuditResponseEventRequest tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public V1AuditResponseEventRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags associated with the event. To provide better search capabilities. Like login.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public V1AuditResponseEventRequest timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * time when this request is generated, use extention method to set it.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public V1AuditResponseEventRequest actionType(RequestActionType actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * @return actionType
   */
  @javax.annotation.Nullable
  public RequestActionType getActionType() {
    return actionType;
  }

  public void setActionType(RequestActionType actionType) {
    this.actionType = actionType;
  }


  public V1AuditResponseEventRequest resourceType(AuditEventAuditResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public AuditEventAuditResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(AuditEventAuditResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public V1AuditResponseEventRequest httpInfo(AuditEventHTTPInfo httpInfo) {
    this.httpInfo = httpInfo;
    return this;
  }

  /**
   * Get httpInfo
   * @return httpInfo
   */
  @javax.annotation.Nullable
  public AuditEventHTTPInfo getHttpInfo() {
    return httpInfo;
  }

  public void setHttpInfo(AuditEventHTTPInfo httpInfo) {
    this.httpInfo = httpInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AuditResponseEventRequest v1AuditResponseEventRequest = (V1AuditResponseEventRequest) o;
    return Objects.equals(this.data, v1AuditResponseEventRequest.data) &&
        Objects.equals(this.apiName, v1AuditResponseEventRequest.apiName) &&
        Objects.equals(this.workspaceID, v1AuditResponseEventRequest.workspaceID) &&
        Objects.equals(this.vaultID, v1AuditResponseEventRequest.vaultID) &&
        Objects.equals(this.tags, v1AuditResponseEventRequest.tags) &&
        Objects.equals(this.timestamp, v1AuditResponseEventRequest.timestamp) &&
        Objects.equals(this.actionType, v1AuditResponseEventRequest.actionType) &&
        Objects.equals(this.resourceType, v1AuditResponseEventRequest.resourceType) &&
        Objects.equals(this.httpInfo, v1AuditResponseEventRequest.httpInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, apiName, workspaceID, vaultID, tags, timestamp, actionType, resourceType, httpInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AuditResponseEventRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    workspaceID: ").append(toIndentedString(workspaceID)).append("\n");
    sb.append("    vaultID: ").append(toIndentedString(vaultID)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    httpInfo: ").append(toIndentedString(httpInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("apiName");
    openapiFields.add("workspaceID");
    openapiFields.add("vaultID");
    openapiFields.add("tags");
    openapiFields.add("timestamp");
    openapiFields.add("actionType");
    openapiFields.add("resourceType");
    openapiFields.add("httpInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1AuditResponseEventRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1AuditResponseEventRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AuditResponseEventRequest is not found in the empty JSON string", V1AuditResponseEventRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1AuditResponseEventRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AuditResponseEventRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `data`
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
        AuditEventData.validateJsonElement(jsonObj.get("data"));
      }
      if ((jsonObj.get("apiName") != null && !jsonObj.get("apiName").isJsonNull()) && !jsonObj.get("apiName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiName").toString()));
      }
      if ((jsonObj.get("workspaceID") != null && !jsonObj.get("workspaceID").isJsonNull()) && !jsonObj.get("workspaceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceID").toString()));
      }
      if ((jsonObj.get("vaultID") != null && !jsonObj.get("vaultID").isJsonNull()) && !jsonObj.get("vaultID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `actionType`
      if (jsonObj.get("actionType") != null && !jsonObj.get("actionType").isJsonNull()) {
        RequestActionType.validateJsonElement(jsonObj.get("actionType"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        AuditEventAuditResourceType.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `httpInfo`
      if (jsonObj.get("httpInfo") != null && !jsonObj.get("httpInfo").isJsonNull()) {
        AuditEventHTTPInfo.validateJsonElement(jsonObj.get("httpInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AuditResponseEventRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AuditResponseEventRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AuditResponseEventRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AuditResponseEventRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AuditResponseEventRequest>() {
           @Override
           public void write(JsonWriter out, V1AuditResponseEventRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AuditResponseEventRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1AuditResponseEventRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1AuditResponseEventRequest
   * @throws IOException if the JSON string is invalid with respect to V1AuditResponseEventRequest
   */
  public static V1AuditResponseEventRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AuditResponseEventRequest.class);
  }

  /**
   * Convert an instance of V1AuditResponseEventRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

