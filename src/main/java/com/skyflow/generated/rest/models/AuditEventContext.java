/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.skyflow.generated.rest.models.ContextAccessType;
import com.skyflow.generated.rest.models.ContextAuthMode;
import com.skyflow.generated.rest.models.V1MemberType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * Context for an audit event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class AuditEventContext {
  public static final String SERIALIZED_NAME_CHANGE_I_D = "changeID";
  @SerializedName(SERIALIZED_NAME_CHANGE_I_D)
  private String changeID;

  public static final String SERIALIZED_NAME_REQUEST_I_D = "requestID";
  @SerializedName(SERIALIZED_NAME_REQUEST_I_D)
  private String requestID;

  public static final String SERIALIZED_NAME_TRACE_I_D = "traceID";
  @SerializedName(SERIALIZED_NAME_TRACE_I_D)
  private String traceID;

  public static final String SERIALIZED_NAME_SESSION_I_D = "sessionID";
  @SerializedName(SERIALIZED_NAME_SESSION_I_D)
  private String sessionID;

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  private String actor;

  public static final String SERIALIZED_NAME_ACTOR_TYPE = "actorType";
  @SerializedName(SERIALIZED_NAME_ACTOR_TYPE)
  private V1MemberType actorType = V1MemberType.NONE;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "accessType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  private ContextAccessType accessType = ContextAccessType.ACCESS_NONE;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_AUTH_MODE = "authMode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  private ContextAuthMode authMode = ContextAuthMode.AUTH_NONE;

  public static final String SERIALIZED_NAME_JWT_I_D = "jwtID";
  @SerializedName(SERIALIZED_NAME_JWT_I_D)
  private String jwtID;

  public static final String SERIALIZED_NAME_BEARER_TOKEN_CONTEXT_I_D = "bearerTokenContextID";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN_CONTEXT_I_D)
  private String bearerTokenContextID;

  public AuditEventContext() {
  }

  public AuditEventContext changeID(String changeID) {
    this.changeID = changeID;
    return this;
  }

  /**
   * ID for the audit event.
   * @return changeID
   */
  @javax.annotation.Nullable
  public String getChangeID() {
    return changeID;
  }

  public void setChangeID(String changeID) {
    this.changeID = changeID;
  }


  public AuditEventContext requestID(String requestID) {
    this.requestID = requestID;
    return this;
  }

  /**
   * ID for the request that caused the event.
   * @return requestID
   */
  @javax.annotation.Nullable
  public String getRequestID() {
    return requestID;
  }

  public void setRequestID(String requestID) {
    this.requestID = requestID;
  }


  public AuditEventContext traceID(String traceID) {
    this.traceID = traceID;
    return this;
  }

  /**
   * ID for the request set by the service that received the request.
   * @return traceID
   */
  @javax.annotation.Nullable
  public String getTraceID() {
    return traceID;
  }

  public void setTraceID(String traceID) {
    this.traceID = traceID;
  }


  public AuditEventContext sessionID(String sessionID) {
    this.sessionID = sessionID;
    return this;
  }

  /**
   * ID for the session in which the request was sent.
   * @return sessionID
   */
  @javax.annotation.Nullable
  public String getSessionID() {
    return sessionID;
  }

  public void setSessionID(String sessionID) {
    this.sessionID = sessionID;
  }


  public AuditEventContext actor(String actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID.
   * @return actor
   */
  @javax.annotation.Nullable
  public String getActor() {
    return actor;
  }

  public void setActor(String actor) {
    this.actor = actor;
  }


  public AuditEventContext actorType(V1MemberType actorType) {
    this.actorType = actorType;
    return this;
  }

  /**
   * Get actorType
   * @return actorType
   */
  @javax.annotation.Nullable
  public V1MemberType getActorType() {
    return actorType;
  }

  public void setActorType(V1MemberType actorType) {
    this.actorType = actorType;
  }


  public AuditEventContext accessType(ContextAccessType accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   * @return accessType
   */
  @javax.annotation.Nullable
  public ContextAccessType getAccessType() {
    return accessType;
  }

  public void setAccessType(ContextAccessType accessType) {
    this.accessType = accessType;
  }


  public AuditEventContext ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP Address of the client that made the request.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public AuditEventContext origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * HTTP Origin request header (including scheme, hostname, and port) of the request.
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public AuditEventContext authMode(ContextAuthMode authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * Get authMode
   * @return authMode
   */
  @javax.annotation.Nullable
  public ContextAuthMode getAuthMode() {
    return authMode;
  }

  public void setAuthMode(ContextAuthMode authMode) {
    this.authMode = authMode;
  }


  public AuditEventContext jwtID(String jwtID) {
    this.jwtID = jwtID;
    return this;
  }

  /**
   * ID of the JWT token.
   * @return jwtID
   */
  @javax.annotation.Nullable
  public String getJwtID() {
    return jwtID;
  }

  public void setJwtID(String jwtID) {
    this.jwtID = jwtID;
  }


  public AuditEventContext bearerTokenContextID(String bearerTokenContextID) {
    this.bearerTokenContextID = bearerTokenContextID;
    return this;
  }

  /**
   * Embedded User Context.
   * @return bearerTokenContextID
   */
  @javax.annotation.Nullable
  public String getBearerTokenContextID() {
    return bearerTokenContextID;
  }

  public void setBearerTokenContextID(String bearerTokenContextID) {
    this.bearerTokenContextID = bearerTokenContextID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditEventContext auditEventContext = (AuditEventContext) o;
    return Objects.equals(this.changeID, auditEventContext.changeID) &&
        Objects.equals(this.requestID, auditEventContext.requestID) &&
        Objects.equals(this.traceID, auditEventContext.traceID) &&
        Objects.equals(this.sessionID, auditEventContext.sessionID) &&
        Objects.equals(this.actor, auditEventContext.actor) &&
        Objects.equals(this.actorType, auditEventContext.actorType) &&
        Objects.equals(this.accessType, auditEventContext.accessType) &&
        Objects.equals(this.ipAddress, auditEventContext.ipAddress) &&
        Objects.equals(this.origin, auditEventContext.origin) &&
        Objects.equals(this.authMode, auditEventContext.authMode) &&
        Objects.equals(this.jwtID, auditEventContext.jwtID) &&
        Objects.equals(this.bearerTokenContextID, auditEventContext.bearerTokenContextID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeID, requestID, traceID, sessionID, actor, actorType, accessType, ipAddress, origin, authMode, jwtID, bearerTokenContextID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditEventContext {\n");
    sb.append("    changeID: ").append(toIndentedString(changeID)).append("\n");
    sb.append("    requestID: ").append(toIndentedString(requestID)).append("\n");
    sb.append("    traceID: ").append(toIndentedString(traceID)).append("\n");
    sb.append("    sessionID: ").append(toIndentedString(sessionID)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    actorType: ").append(toIndentedString(actorType)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    jwtID: ").append(toIndentedString(jwtID)).append("\n");
    sb.append("    bearerTokenContextID: ").append(toIndentedString(bearerTokenContextID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeID");
    openapiFields.add("requestID");
    openapiFields.add("traceID");
    openapiFields.add("sessionID");
    openapiFields.add("actor");
    openapiFields.add("actorType");
    openapiFields.add("accessType");
    openapiFields.add("ipAddress");
    openapiFields.add("origin");
    openapiFields.add("authMode");
    openapiFields.add("jwtID");
    openapiFields.add("bearerTokenContextID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditEventContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditEventContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditEventContext is not found in the empty JSON string", AuditEventContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditEventContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditEventContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("changeID") != null && !jsonObj.get("changeID").isJsonNull()) && !jsonObj.get("changeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeID").toString()));
      }
      if ((jsonObj.get("requestID") != null && !jsonObj.get("requestID").isJsonNull()) && !jsonObj.get("requestID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestID").toString()));
      }
      if ((jsonObj.get("traceID") != null && !jsonObj.get("traceID").isJsonNull()) && !jsonObj.get("traceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `traceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("traceID").toString()));
      }
      if ((jsonObj.get("sessionID") != null && !jsonObj.get("sessionID").isJsonNull()) && !jsonObj.get("sessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionID").toString()));
      }
      if ((jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) && !jsonObj.get("actor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor").toString()));
      }
      // validate the optional field `actorType`
      if (jsonObj.get("actorType") != null && !jsonObj.get("actorType").isJsonNull()) {
        V1MemberType.validateJsonElement(jsonObj.get("actorType"));
      }
      // validate the optional field `accessType`
      if (jsonObj.get("accessType") != null && !jsonObj.get("accessType").isJsonNull()) {
        ContextAccessType.validateJsonElement(jsonObj.get("accessType"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      // validate the optional field `authMode`
      if (jsonObj.get("authMode") != null && !jsonObj.get("authMode").isJsonNull()) {
        ContextAuthMode.validateJsonElement(jsonObj.get("authMode"));
      }
      if ((jsonObj.get("jwtID") != null && !jsonObj.get("jwtID").isJsonNull()) && !jsonObj.get("jwtID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwtID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwtID").toString()));
      }
      if ((jsonObj.get("bearerTokenContextID") != null && !jsonObj.get("bearerTokenContextID").isJsonNull()) && !jsonObj.get("bearerTokenContextID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bearerTokenContextID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bearerTokenContextID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditEventContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditEventContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditEventContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditEventContext.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditEventContext>() {
           @Override
           public void write(JsonWriter out, AuditEventContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditEventContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditEventContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditEventContext
   * @throws IOException if the JSON string is invalid with respect to AuditEventContext
   */
  public static AuditEventContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditEventContext.class);
  }

  /**
   * Convert an instance of AuditEventContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

