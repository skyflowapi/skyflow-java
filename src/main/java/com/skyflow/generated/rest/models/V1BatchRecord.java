/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.skyflow.generated.rest.models.BatchRecordMethod;
import com.skyflow.generated.rest.models.RedactionEnumREDACTION;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * V1BatchRecord
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class V1BatchRecord {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Object fields;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private BatchRecordMethod method = BatchRecordMethod.NONE;

  public static final String SERIALIZED_NAME_BATCH_I_D = "batchID";
  @SerializedName(SERIALIZED_NAME_BATCH_I_D)
  private String batchID;

  public static final String SERIALIZED_NAME_REDACTION = "redaction";
  @SerializedName(SERIALIZED_NAME_REDACTION)
  private RedactionEnumREDACTION redaction = RedactionEnumREDACTION.DEFAULT;

  public static final String SERIALIZED_NAME_TOKENIZATION = "tokenization";
  @SerializedName(SERIALIZED_NAME_TOKENIZATION)
  private Boolean tokenization;

  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_DOWNLOAD_U_R_L = "downloadURL";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_U_R_L)
  private Boolean downloadURL;

  public static final String SERIALIZED_NAME_UPSERT = "upsert";
  @SerializedName(SERIALIZED_NAME_UPSERT)
  private String upsert;

  public static final String SERIALIZED_NAME_TOKENS = "tokens";
  @SerializedName(SERIALIZED_NAME_TOKENS)
  private Object tokens;

  public V1BatchRecord() {
  }

  public V1BatchRecord fields(Object fields) {
    this.fields = fields;
    return this;
  }

  /**
   * Field and value key pairs. For example, &#x60;{&#39;field_1&#39;:&#39;value_1&#39;, &#39;field_2&#39;:&#39;value_2&#39;}&#x60;. Only valid when &#x60;method&#x60; is &#x60;POST&#x60; or &#x60;PUT&#x60;.
   * @return fields
   */
  @javax.annotation.Nullable
  public Object getFields() {
    return fields;
  }

  public void setFields(Object fields) {
    this.fields = fields;
  }


  public V1BatchRecord tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Name of the table to perform the operation on.
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public V1BatchRecord method(BatchRecordMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public BatchRecordMethod getMethod() {
    return method;
  }

  public void setMethod(BatchRecordMethod method) {
    this.method = method;
  }


  public V1BatchRecord batchID(String batchID) {
    this.batchID = batchID;
    return this;
  }

  /**
   * ID to group operations by. Operations in the same group are executed sequentially.
   * @return batchID
   */
  @javax.annotation.Nullable
  public String getBatchID() {
    return batchID;
  }

  public void setBatchID(String batchID) {
    this.batchID = batchID;
  }


  public V1BatchRecord redaction(RedactionEnumREDACTION redaction) {
    this.redaction = redaction;
    return this;
  }

  /**
   * Get redaction
   * @return redaction
   */
  @javax.annotation.Nullable
  public RedactionEnumREDACTION getRedaction() {
    return redaction;
  }

  public void setRedaction(RedactionEnumREDACTION redaction) {
    this.redaction = redaction;
  }


  public V1BatchRecord tokenization(Boolean tokenization) {
    this.tokenization = tokenization;
    return this;
  }

  /**
   * If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified.
   * @return tokenization
   */
  @javax.annotation.Nullable
  public Boolean getTokenization() {
    return tokenization;
  }

  public void setTokenization(Boolean tokenization) {
    this.tokenization = tokenization;
  }


  public V1BatchRecord ID(String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * &#x60;skyflow_id&#x60; for the record. Only valid when &#x60;method&#x60; is &#x60;GET&#x60;, &#x60;DELETE&#x60;, or &#x60;PUT&#x60;.
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public V1BatchRecord downloadURL(Boolean downloadURL) {
    this.downloadURL = downloadURL;
    return this;
  }

  /**
   * If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.
   * @return downloadURL
   */
  @javax.annotation.Nullable
  public Boolean getDownloadURL() {
    return downloadURL;
  }

  public void setDownloadURL(Boolean downloadURL) {
    this.downloadURL = downloadURL;
  }


  public V1BatchRecord upsert(String upsert) {
    this.upsert = upsert;
    return this;
  }

  /**
   * Column that stores primary keys for upsert operations. The column must be marked as unique in the vault schema. Only valid when &#x60;method&#x60; is &#x60;POST&#x60;.
   * @return upsert
   */
  @javax.annotation.Nullable
  public String getUpsert() {
    return upsert;
  }

  public void setUpsert(String upsert) {
    this.upsert = upsert;
  }


  public V1BatchRecord tokens(Object tokens) {
    this.tokens = tokens;
    return this;
  }

  /**
   * Fields and tokens for the record. For example, &#x60;{&#39;field_1&#39;:&#39;token_1&#39;, &#39;field_2&#39;:&#39;token_2&#39;}&#x60;.
   * @return tokens
   */
  @javax.annotation.Nullable
  public Object getTokens() {
    return tokens;
  }

  public void setTokens(Object tokens) {
    this.tokens = tokens;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1BatchRecord v1BatchRecord = (V1BatchRecord) o;
    return Objects.equals(this.fields, v1BatchRecord.fields) &&
        Objects.equals(this.tableName, v1BatchRecord.tableName) &&
        Objects.equals(this.method, v1BatchRecord.method) &&
        Objects.equals(this.batchID, v1BatchRecord.batchID) &&
        Objects.equals(this.redaction, v1BatchRecord.redaction) &&
        Objects.equals(this.tokenization, v1BatchRecord.tokenization) &&
        Objects.equals(this.ID, v1BatchRecord.ID) &&
        Objects.equals(this.downloadURL, v1BatchRecord.downloadURL) &&
        Objects.equals(this.upsert, v1BatchRecord.upsert) &&
        Objects.equals(this.tokens, v1BatchRecord.tokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, tableName, method, batchID, redaction, tokenization, ID, downloadURL, upsert, tokens);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1BatchRecord {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    batchID: ").append(toIndentedString(batchID)).append("\n");
    sb.append("    redaction: ").append(toIndentedString(redaction)).append("\n");
    sb.append("    tokenization: ").append(toIndentedString(tokenization)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    downloadURL: ").append(toIndentedString(downloadURL)).append("\n");
    sb.append("    upsert: ").append(toIndentedString(upsert)).append("\n");
    sb.append("    tokens: ").append(toIndentedString(tokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("tableName");
    openapiFields.add("method");
    openapiFields.add("batchID");
    openapiFields.add("redaction");
    openapiFields.add("tokenization");
    openapiFields.add("ID");
    openapiFields.add("downloadURL");
    openapiFields.add("upsert");
    openapiFields.add("tokens");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1BatchRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1BatchRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1BatchRecord is not found in the empty JSON string", V1BatchRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1BatchRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1BatchRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tableName") != null && !jsonObj.get("tableName").isJsonNull()) && !jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        BatchRecordMethod.validateJsonElement(jsonObj.get("method"));
      }
      if ((jsonObj.get("batchID") != null && !jsonObj.get("batchID").isJsonNull()) && !jsonObj.get("batchID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchID").toString()));
      }
      // validate the optional field `redaction`
      if (jsonObj.get("redaction") != null && !jsonObj.get("redaction").isJsonNull()) {
        RedactionEnumREDACTION.validateJsonElement(jsonObj.get("redaction"));
      }
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("upsert") != null && !jsonObj.get("upsert").isJsonNull()) && !jsonObj.get("upsert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upsert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upsert").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1BatchRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1BatchRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1BatchRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1BatchRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<V1BatchRecord>() {
           @Override
           public void write(JsonWriter out, V1BatchRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1BatchRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1BatchRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1BatchRecord
   * @throws IOException if the JSON string is invalid with respect to V1BatchRecord
   */
  public static V1BatchRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1BatchRecord.class);
  }

  /**
   * Convert an instance of V1BatchRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

