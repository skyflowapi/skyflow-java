/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.skyflow.generated.rest.models.AuditEventContext;
import com.skyflow.generated.rest.models.V1AuditEventResponse;
import com.skyflow.generated.rest.models.V1AuditResponseEventRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * Audit event details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class V1AuditResponseEvent {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private AuditEventContext context;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private V1AuditResponseEventRequest request;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private V1AuditEventResponse response;

  public static final String SERIALIZED_NAME_PARENT_ACCOUNT_I_D = "parentAccountID";
  @SerializedName(SERIALIZED_NAME_PARENT_ACCOUNT_I_D)
  private String parentAccountID;

  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "accountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private String accountID;

  public static final String SERIALIZED_NAME_RESOURCE_I_DS = "resourceIDs";
  @SerializedName(SERIALIZED_NAME_RESOURCE_I_DS)
  private List<String> resourceIDs = new ArrayList<>();

  public V1AuditResponseEvent() {
  }

  public V1AuditResponseEvent context(AuditEventContext context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public AuditEventContext getContext() {
    return context;
  }

  public void setContext(AuditEventContext context) {
    this.context = context;
  }


  public V1AuditResponseEvent request(V1AuditResponseEventRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public V1AuditResponseEventRequest getRequest() {
    return request;
  }

  public void setRequest(V1AuditResponseEventRequest request) {
    this.request = request;
  }


  public V1AuditResponseEvent response(V1AuditEventResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public V1AuditEventResponse getResponse() {
    return response;
  }

  public void setResponse(V1AuditEventResponse response) {
    this.response = response;
  }


  public V1AuditResponseEvent parentAccountID(String parentAccountID) {
    this.parentAccountID = parentAccountID;
    return this;
  }

  /**
   * Parent account ID of the account that made the request, if any.
   * @return parentAccountID
   */
  @javax.annotation.Nullable
  public String getParentAccountID() {
    return parentAccountID;
  }

  public void setParentAccountID(String parentAccountID) {
    this.parentAccountID = parentAccountID;
  }


  public V1AuditResponseEvent accountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * ID of the account that made the request.
   * @return accountID
   */
  @javax.annotation.Nullable
  public String getAccountID() {
    return accountID;
  }

  public void setAccountID(String accountID) {
    this.accountID = accountID;
  }


  public V1AuditResponseEvent resourceIDs(List<String> resourceIDs) {
    this.resourceIDs = resourceIDs;
    return this;
  }

  public V1AuditResponseEvent addResourceIDsItem(String resourceIDsItem) {
    if (this.resourceIDs == null) {
      this.resourceIDs = new ArrayList<>();
    }
    this.resourceIDs.add(resourceIDsItem);
    return this;
  }

  /**
   * IDs for resources involved in the event. Presented in &#x60;{resourceType}/{resourceID}&#x60; format. For example, &#x60;VAULT/cd1d815aa09b4cbfbb803bd20349f202&#x60;.
   * @return resourceIDs
   */
  @javax.annotation.Nullable
  public List<String> getResourceIDs() {
    return resourceIDs;
  }

  public void setResourceIDs(List<String> resourceIDs) {
    this.resourceIDs = resourceIDs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1AuditResponseEvent v1AuditResponseEvent = (V1AuditResponseEvent) o;
    return Objects.equals(this.context, v1AuditResponseEvent.context) &&
        Objects.equals(this.request, v1AuditResponseEvent.request) &&
        Objects.equals(this.response, v1AuditResponseEvent.response) &&
        Objects.equals(this.parentAccountID, v1AuditResponseEvent.parentAccountID) &&
        Objects.equals(this.accountID, v1AuditResponseEvent.accountID) &&
        Objects.equals(this.resourceIDs, v1AuditResponseEvent.resourceIDs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, request, response, parentAccountID, accountID, resourceIDs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1AuditResponseEvent {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    parentAccountID: ").append(toIndentedString(parentAccountID)).append("\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    resourceIDs: ").append(toIndentedString(resourceIDs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("request");
    openapiFields.add("response");
    openapiFields.add("parentAccountID");
    openapiFields.add("accountID");
    openapiFields.add("resourceIDs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1AuditResponseEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1AuditResponseEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1AuditResponseEvent is not found in the empty JSON string", V1AuditResponseEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1AuditResponseEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1AuditResponseEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        AuditEventContext.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        V1AuditResponseEventRequest.validateJsonElement(jsonObj.get("request"));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        V1AuditEventResponse.validateJsonElement(jsonObj.get("response"));
      }
      if ((jsonObj.get("parentAccountID") != null && !jsonObj.get("parentAccountID").isJsonNull()) && !jsonObj.get("parentAccountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAccountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAccountID").toString()));
      }
      if ((jsonObj.get("accountID") != null && !jsonObj.get("accountID").isJsonNull()) && !jsonObj.get("accountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceIDs") != null && !jsonObj.get("resourceIDs").isJsonNull() && !jsonObj.get("resourceIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIDs` to be an array in the JSON string but got `%s`", jsonObj.get("resourceIDs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1AuditResponseEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1AuditResponseEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1AuditResponseEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1AuditResponseEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<V1AuditResponseEvent>() {
           @Override
           public void write(JsonWriter out, V1AuditResponseEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1AuditResponseEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1AuditResponseEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1AuditResponseEvent
   * @throws IOException if the JSON string is invalid with respect to V1AuditResponseEvent
   */
  public static V1AuditResponseEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1AuditResponseEvent.class);
  }

  /**
   * Convert an instance of V1AuditResponseEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

