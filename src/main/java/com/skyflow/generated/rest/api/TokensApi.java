/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.api;

import com.skyflow.generated.rest.ApiCallback;
import com.skyflow.generated.rest.ApiClient;
import com.skyflow.generated.rest.ApiException;
import com.skyflow.generated.rest.ApiResponse;
import com.skyflow.generated.rest.Configuration;
import com.skyflow.generated.rest.Pair;
import com.skyflow.generated.rest.ProgressRequestBody;
import com.skyflow.generated.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.skyflow.generated.rest.models.GooglerpcStatus;
import com.skyflow.generated.rest.models.V1DetokenizePayload;
import com.skyflow.generated.rest.models.V1DetokenizeResponse;
import com.skyflow.generated.rest.models.V1TokenizePayload;
import com.skyflow.generated.rest.models.V1TokenizeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TokensApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recordServiceDetokenize
     * @param vaultID ID of the vault. (required)
     * @param detokenizePayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceDetokenizeCall(String vaultID, V1DetokenizePayload detokenizePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detokenizePayload;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/detokenize"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceDetokenizeValidateBeforeCall(String vaultID, V1DetokenizePayload detokenizePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceDetokenize(Async)");
        }

        // verify the required parameter 'detokenizePayload' is set
        if (detokenizePayload == null) {
            throw new ApiException("Missing the required parameter 'detokenizePayload' when calling recordServiceDetokenize(Async)");
        }

        return recordServiceDetokenizeCall(vaultID, detokenizePayload, _callback);

    }

    /**
     * Detokenize
     * Returns records that correspond to the specified tokens.
     * @param vaultID ID of the vault. (required)
     * @param detokenizePayload  (required)
     * @return V1DetokenizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1DetokenizeResponse recordServiceDetokenize(String vaultID, V1DetokenizePayload detokenizePayload) throws ApiException {
        ApiResponse<V1DetokenizeResponse> localVarResp = recordServiceDetokenizeWithHttpInfo(vaultID, detokenizePayload);
        return localVarResp.getData();
    }

    /**
     * Detokenize
     * Returns records that correspond to the specified tokens.
     * @param vaultID ID of the vault. (required)
     * @param detokenizePayload  (required)
     * @return ApiResponse&lt;V1DetokenizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DetokenizeResponse> recordServiceDetokenizeWithHttpInfo(String vaultID, V1DetokenizePayload detokenizePayload) throws ApiException {
        okhttp3.Call localVarCall = recordServiceDetokenizeValidateBeforeCall(vaultID, detokenizePayload, null);
        Type localVarReturnType = new TypeToken<V1DetokenizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detokenize (asynchronously)
     * Returns records that correspond to the specified tokens.
     * @param vaultID ID of the vault. (required)
     * @param detokenizePayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceDetokenizeAsync(String vaultID, V1DetokenizePayload detokenizePayload, final ApiCallback<V1DetokenizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceDetokenizeValidateBeforeCall(vaultID, detokenizePayload, _callback);
        Type localVarReturnType = new TypeToken<V1DetokenizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceTokenize
     * @param vaultID ID of the vault. (required)
     * @param tokenizePayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceTokenizeCall(String vaultID, V1TokenizePayload tokenizePayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tokenizePayload;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/tokenize"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceTokenizeValidateBeforeCall(String vaultID, V1TokenizePayload tokenizePayload, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceTokenize(Async)");
        }

        // verify the required parameter 'tokenizePayload' is set
        if (tokenizePayload == null) {
            throw new ApiException("Missing the required parameter 'tokenizePayload' when calling recordServiceTokenize(Async)");
        }

        return recordServiceTokenizeCall(vaultID, tokenizePayload, _callback);

    }

    /**
     * Tokenize
     * Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint doesn&#39;t insert records—it returns tokens for existing values. To insert records and tokenize that new record&#39;s values, see &lt;a href&#x3D;&#39;#RecordService_InsertRecord&#39;&gt;Insert Record&lt;/a&gt; and the tokenization parameter.
     * @param vaultID ID of the vault. (required)
     * @param tokenizePayload  (required)
     * @return V1TokenizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1TokenizeResponse recordServiceTokenize(String vaultID, V1TokenizePayload tokenizePayload) throws ApiException {
        ApiResponse<V1TokenizeResponse> localVarResp = recordServiceTokenizeWithHttpInfo(vaultID, tokenizePayload);
        return localVarResp.getData();
    }

    /**
     * Tokenize
     * Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint doesn&#39;t insert records—it returns tokens for existing values. To insert records and tokenize that new record&#39;s values, see &lt;a href&#x3D;&#39;#RecordService_InsertRecord&#39;&gt;Insert Record&lt;/a&gt; and the tokenization parameter.
     * @param vaultID ID of the vault. (required)
     * @param tokenizePayload  (required)
     * @return ApiResponse&lt;V1TokenizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1TokenizeResponse> recordServiceTokenizeWithHttpInfo(String vaultID, V1TokenizePayload tokenizePayload) throws ApiException {
        okhttp3.Call localVarCall = recordServiceTokenizeValidateBeforeCall(vaultID, tokenizePayload, null);
        Type localVarReturnType = new TypeToken<V1TokenizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokenize (asynchronously)
     * Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This endpoint doesn&#39;t insert records—it returns tokens for existing values. To insert records and tokenize that new record&#39;s values, see &lt;a href&#x3D;&#39;#RecordService_InsertRecord&#39;&gt;Insert Record&lt;/a&gt; and the tokenization parameter.
     * @param vaultID ID of the vault. (required)
     * @param tokenizePayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceTokenizeAsync(String vaultID, V1TokenizePayload tokenizePayload, final ApiCallback<V1TokenizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceTokenizeValidateBeforeCall(vaultID, tokenizePayload, _callback);
        Type localVarReturnType = new TypeToken<V1TokenizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
