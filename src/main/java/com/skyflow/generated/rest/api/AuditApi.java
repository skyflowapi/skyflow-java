/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.api;

import com.skyflow.generated.rest.ApiCallback;
import com.skyflow.generated.rest.ApiClient;
import com.skyflow.generated.rest.ApiException;
import com.skyflow.generated.rest.ApiResponse;
import com.skyflow.generated.rest.Configuration;
import com.skyflow.generated.rest.Pair;
import com.skyflow.generated.rest.ProgressRequestBody;
import com.skyflow.generated.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.skyflow.generated.rest.models.GooglerpcStatus;
import com.skyflow.generated.rest.models.V1AuditResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditServiceListAuditEvents
     * @param filterOpsAccountID Resources with the specified account ID. (required)
     * @param filterOpsContextChangeID ID for the audit event. (optional)
     * @param filterOpsContextRequestID ID for the request that caused the event. (optional)
     * @param filterOpsContextTraceID ID for the request set by the service that received the request. (optional)
     * @param filterOpsContextSessionID ID for the session in which the request was sent. (optional)
     * @param filterOpsContextActor Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID. (optional)
     * @param filterOpsContextActorType Type of member who sent the request. (optional, default to NONE)
     * @param filterOpsContextAccessType Type of access for the request. (optional, default to ACCESS_NONE)
     * @param filterOpsContextIpAddress IP Address of the client that made the request. (optional)
     * @param filterOpsContextOrigin HTTP Origin request header (including scheme, hostname, and port) of the request. (optional)
     * @param filterOpsContextAuthMode Authentication mode the &#x60;actor&#x60; used. (optional, default to AUTH_NONE)
     * @param filterOpsContextJwtID ID of the JWT token. (optional)
     * @param filterOpsContextBearerTokenContextID Embedded User Context. (optional)
     * @param filterOpsParentAccountID Resources with the specified parent account ID. (optional)
     * @param filterOpsWorkspaceID Resources with the specified workspace ID. (optional)
     * @param filterOpsVaultID Resources with the specified vault ID. (optional)
     * @param filterOpsResourceIDs Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of \&quot;\\&lt;resourceType\\&gt;/\\&lt;resourceID\\&gt;\&quot;. For example, \&quot;VAULT/12345, USER/67890\&quot;. (optional)
     * @param filterOpsActionType Events with the specified action type. (optional, default to NONE)
     * @param filterOpsResourceType Resources with the specified type. (optional, default to NONE_API)
     * @param filterOpsTags Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, \&quot;login, get\&quot;. (optional)
     * @param filterOpsResponseCode HTTP response code of the request. (optional)
     * @param filterOpsStartTime Start timestamp for the query, in SQL format. (optional)
     * @param filterOpsEndTime End timestamp for the query, in SQL format. (optional)
     * @param filterOpsApiName Name of the API called in the request. (optional)
     * @param filterOpsResponseMessage Response message of the request. (optional)
     * @param filterOpsHttpMethod HTTP method of the request. (optional)
     * @param filterOpsHttpURI HTTP URI of the request. (optional)
     * @param sortOpsSortBy Fully-qualified field by which to sort results. Field names should be in camel case (for example, \&quot;capitalization.camelCase\&quot;). (optional)
     * @param sortOpsOrderBy Ascending or descending ordering of results. (optional, default to ASCENDING)
     * @param afterOpsTimestamp Timestamp provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param afterOpsChangeID Change ID provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param limit Number of results to return. (optional, default to 25)
     * @param offset Record position at which to start returning results. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceListAuditEventsCall(String filterOpsAccountID, String filterOpsContextChangeID, String filterOpsContextRequestID, String filterOpsContextTraceID, String filterOpsContextSessionID, String filterOpsContextActor, String filterOpsContextActorType, String filterOpsContextAccessType, String filterOpsContextIpAddress, String filterOpsContextOrigin, String filterOpsContextAuthMode, String filterOpsContextJwtID, String filterOpsContextBearerTokenContextID, String filterOpsParentAccountID, String filterOpsWorkspaceID, String filterOpsVaultID, String filterOpsResourceIDs, String filterOpsActionType, String filterOpsResourceType, String filterOpsTags, Integer filterOpsResponseCode, String filterOpsStartTime, String filterOpsEndTime, String filterOpsApiName, String filterOpsResponseMessage, String filterOpsHttpMethod, String filterOpsHttpURI, String sortOpsSortBy, String sortOpsOrderBy, String afterOpsTimestamp, String afterOpsChangeID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audit/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterOpsContextChangeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.changeID", filterOpsContextChangeID));
        }

        if (filterOpsContextRequestID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.requestID", filterOpsContextRequestID));
        }

        if (filterOpsContextTraceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.traceID", filterOpsContextTraceID));
        }

        if (filterOpsContextSessionID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.sessionID", filterOpsContextSessionID));
        }

        if (filterOpsContextActor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.actor", filterOpsContextActor));
        }

        if (filterOpsContextActorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.actorType", filterOpsContextActorType));
        }

        if (filterOpsContextAccessType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.accessType", filterOpsContextAccessType));
        }

        if (filterOpsContextIpAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.ipAddress", filterOpsContextIpAddress));
        }

        if (filterOpsContextOrigin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.origin", filterOpsContextOrigin));
        }

        if (filterOpsContextAuthMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.authMode", filterOpsContextAuthMode));
        }

        if (filterOpsContextJwtID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.jwtID", filterOpsContextJwtID));
        }

        if (filterOpsContextBearerTokenContextID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.context.bearerTokenContextID", filterOpsContextBearerTokenContextID));
        }

        if (filterOpsParentAccountID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.parentAccountID", filterOpsParentAccountID));
        }

        if (filterOpsAccountID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.accountID", filterOpsAccountID));
        }

        if (filterOpsWorkspaceID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.workspaceID", filterOpsWorkspaceID));
        }

        if (filterOpsVaultID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.vaultID", filterOpsVaultID));
        }

        if (filterOpsResourceIDs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.resourceIDs", filterOpsResourceIDs));
        }

        if (filterOpsActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.actionType", filterOpsActionType));
        }

        if (filterOpsResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.resourceType", filterOpsResourceType));
        }

        if (filterOpsTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.tags", filterOpsTags));
        }

        if (filterOpsResponseCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.responseCode", filterOpsResponseCode));
        }

        if (filterOpsStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.startTime", filterOpsStartTime));
        }

        if (filterOpsEndTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.endTime", filterOpsEndTime));
        }

        if (filterOpsApiName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.apiName", filterOpsApiName));
        }

        if (filterOpsResponseMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.responseMessage", filterOpsResponseMessage));
        }

        if (filterOpsHttpMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.httpMethod", filterOpsHttpMethod));
        }

        if (filterOpsHttpURI != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterOps.httpURI", filterOpsHttpURI));
        }

        if (sortOpsSortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOps.sortBy", sortOpsSortBy));
        }

        if (sortOpsOrderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOps.orderBy", sortOpsOrderBy));
        }

        if (afterOpsTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterOps.timestamp", afterOpsTimestamp));
        }

        if (afterOpsChangeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterOps.changeID", afterOpsChangeID));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditServiceListAuditEventsValidateBeforeCall(String filterOpsAccountID, String filterOpsContextChangeID, String filterOpsContextRequestID, String filterOpsContextTraceID, String filterOpsContextSessionID, String filterOpsContextActor, String filterOpsContextActorType, String filterOpsContextAccessType, String filterOpsContextIpAddress, String filterOpsContextOrigin, String filterOpsContextAuthMode, String filterOpsContextJwtID, String filterOpsContextBearerTokenContextID, String filterOpsParentAccountID, String filterOpsWorkspaceID, String filterOpsVaultID, String filterOpsResourceIDs, String filterOpsActionType, String filterOpsResourceType, String filterOpsTags, Integer filterOpsResponseCode, String filterOpsStartTime, String filterOpsEndTime, String filterOpsApiName, String filterOpsResponseMessage, String filterOpsHttpMethod, String filterOpsHttpURI, String sortOpsSortBy, String sortOpsOrderBy, String afterOpsTimestamp, String afterOpsChangeID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filterOpsAccountID' is set
        if (filterOpsAccountID == null) {
            throw new ApiException("Missing the required parameter 'filterOpsAccountID' when calling auditServiceListAuditEvents(Async)");
        }

        return auditServiceListAuditEventsCall(filterOpsAccountID, filterOpsContextChangeID, filterOpsContextRequestID, filterOpsContextTraceID, filterOpsContextSessionID, filterOpsContextActor, filterOpsContextActorType, filterOpsContextAccessType, filterOpsContextIpAddress, filterOpsContextOrigin, filterOpsContextAuthMode, filterOpsContextJwtID, filterOpsContextBearerTokenContextID, filterOpsParentAccountID, filterOpsWorkspaceID, filterOpsVaultID, filterOpsResourceIDs, filterOpsActionType, filterOpsResourceType, filterOpsTags, filterOpsResponseCode, filterOpsStartTime, filterOpsEndTime, filterOpsApiName, filterOpsResponseMessage, filterOpsHttpMethod, filterOpsHttpURI, sortOpsSortBy, sortOpsOrderBy, afterOpsTimestamp, afterOpsChangeID, limit, offset, _callback);

    }

    /**
     * List Audit Events
     * Lists audit events that match query parameters.
     * @param filterOpsAccountID Resources with the specified account ID. (required)
     * @param filterOpsContextChangeID ID for the audit event. (optional)
     * @param filterOpsContextRequestID ID for the request that caused the event. (optional)
     * @param filterOpsContextTraceID ID for the request set by the service that received the request. (optional)
     * @param filterOpsContextSessionID ID for the session in which the request was sent. (optional)
     * @param filterOpsContextActor Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID. (optional)
     * @param filterOpsContextActorType Type of member who sent the request. (optional, default to NONE)
     * @param filterOpsContextAccessType Type of access for the request. (optional, default to ACCESS_NONE)
     * @param filterOpsContextIpAddress IP Address of the client that made the request. (optional)
     * @param filterOpsContextOrigin HTTP Origin request header (including scheme, hostname, and port) of the request. (optional)
     * @param filterOpsContextAuthMode Authentication mode the &#x60;actor&#x60; used. (optional, default to AUTH_NONE)
     * @param filterOpsContextJwtID ID of the JWT token. (optional)
     * @param filterOpsContextBearerTokenContextID Embedded User Context. (optional)
     * @param filterOpsParentAccountID Resources with the specified parent account ID. (optional)
     * @param filterOpsWorkspaceID Resources with the specified workspace ID. (optional)
     * @param filterOpsVaultID Resources with the specified vault ID. (optional)
     * @param filterOpsResourceIDs Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of \&quot;\\&lt;resourceType\\&gt;/\\&lt;resourceID\\&gt;\&quot;. For example, \&quot;VAULT/12345, USER/67890\&quot;. (optional)
     * @param filterOpsActionType Events with the specified action type. (optional, default to NONE)
     * @param filterOpsResourceType Resources with the specified type. (optional, default to NONE_API)
     * @param filterOpsTags Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, \&quot;login, get\&quot;. (optional)
     * @param filterOpsResponseCode HTTP response code of the request. (optional)
     * @param filterOpsStartTime Start timestamp for the query, in SQL format. (optional)
     * @param filterOpsEndTime End timestamp for the query, in SQL format. (optional)
     * @param filterOpsApiName Name of the API called in the request. (optional)
     * @param filterOpsResponseMessage Response message of the request. (optional)
     * @param filterOpsHttpMethod HTTP method of the request. (optional)
     * @param filterOpsHttpURI HTTP URI of the request. (optional)
     * @param sortOpsSortBy Fully-qualified field by which to sort results. Field names should be in camel case (for example, \&quot;capitalization.camelCase\&quot;). (optional)
     * @param sortOpsOrderBy Ascending or descending ordering of results. (optional, default to ASCENDING)
     * @param afterOpsTimestamp Timestamp provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param afterOpsChangeID Change ID provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param limit Number of results to return. (optional, default to 25)
     * @param offset Record position at which to start returning results. (optional, default to 0)
     * @return V1AuditResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1AuditResponse auditServiceListAuditEvents(String filterOpsAccountID, String filterOpsContextChangeID, String filterOpsContextRequestID, String filterOpsContextTraceID, String filterOpsContextSessionID, String filterOpsContextActor, String filterOpsContextActorType, String filterOpsContextAccessType, String filterOpsContextIpAddress, String filterOpsContextOrigin, String filterOpsContextAuthMode, String filterOpsContextJwtID, String filterOpsContextBearerTokenContextID, String filterOpsParentAccountID, String filterOpsWorkspaceID, String filterOpsVaultID, String filterOpsResourceIDs, String filterOpsActionType, String filterOpsResourceType, String filterOpsTags, Integer filterOpsResponseCode, String filterOpsStartTime, String filterOpsEndTime, String filterOpsApiName, String filterOpsResponseMessage, String filterOpsHttpMethod, String filterOpsHttpURI, String sortOpsSortBy, String sortOpsOrderBy, String afterOpsTimestamp, String afterOpsChangeID, Long limit, Long offset) throws ApiException {
        ApiResponse<V1AuditResponse> localVarResp = auditServiceListAuditEventsWithHttpInfo(filterOpsAccountID, filterOpsContextChangeID, filterOpsContextRequestID, filterOpsContextTraceID, filterOpsContextSessionID, filterOpsContextActor, filterOpsContextActorType, filterOpsContextAccessType, filterOpsContextIpAddress, filterOpsContextOrigin, filterOpsContextAuthMode, filterOpsContextJwtID, filterOpsContextBearerTokenContextID, filterOpsParentAccountID, filterOpsWorkspaceID, filterOpsVaultID, filterOpsResourceIDs, filterOpsActionType, filterOpsResourceType, filterOpsTags, filterOpsResponseCode, filterOpsStartTime, filterOpsEndTime, filterOpsApiName, filterOpsResponseMessage, filterOpsHttpMethod, filterOpsHttpURI, sortOpsSortBy, sortOpsOrderBy, afterOpsTimestamp, afterOpsChangeID, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Audit Events
     * Lists audit events that match query parameters.
     * @param filterOpsAccountID Resources with the specified account ID. (required)
     * @param filterOpsContextChangeID ID for the audit event. (optional)
     * @param filterOpsContextRequestID ID for the request that caused the event. (optional)
     * @param filterOpsContextTraceID ID for the request set by the service that received the request. (optional)
     * @param filterOpsContextSessionID ID for the session in which the request was sent. (optional)
     * @param filterOpsContextActor Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID. (optional)
     * @param filterOpsContextActorType Type of member who sent the request. (optional, default to NONE)
     * @param filterOpsContextAccessType Type of access for the request. (optional, default to ACCESS_NONE)
     * @param filterOpsContextIpAddress IP Address of the client that made the request. (optional)
     * @param filterOpsContextOrigin HTTP Origin request header (including scheme, hostname, and port) of the request. (optional)
     * @param filterOpsContextAuthMode Authentication mode the &#x60;actor&#x60; used. (optional, default to AUTH_NONE)
     * @param filterOpsContextJwtID ID of the JWT token. (optional)
     * @param filterOpsContextBearerTokenContextID Embedded User Context. (optional)
     * @param filterOpsParentAccountID Resources with the specified parent account ID. (optional)
     * @param filterOpsWorkspaceID Resources with the specified workspace ID. (optional)
     * @param filterOpsVaultID Resources with the specified vault ID. (optional)
     * @param filterOpsResourceIDs Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of \&quot;\\&lt;resourceType\\&gt;/\\&lt;resourceID\\&gt;\&quot;. For example, \&quot;VAULT/12345, USER/67890\&quot;. (optional)
     * @param filterOpsActionType Events with the specified action type. (optional, default to NONE)
     * @param filterOpsResourceType Resources with the specified type. (optional, default to NONE_API)
     * @param filterOpsTags Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, \&quot;login, get\&quot;. (optional)
     * @param filterOpsResponseCode HTTP response code of the request. (optional)
     * @param filterOpsStartTime Start timestamp for the query, in SQL format. (optional)
     * @param filterOpsEndTime End timestamp for the query, in SQL format. (optional)
     * @param filterOpsApiName Name of the API called in the request. (optional)
     * @param filterOpsResponseMessage Response message of the request. (optional)
     * @param filterOpsHttpMethod HTTP method of the request. (optional)
     * @param filterOpsHttpURI HTTP URI of the request. (optional)
     * @param sortOpsSortBy Fully-qualified field by which to sort results. Field names should be in camel case (for example, \&quot;capitalization.camelCase\&quot;). (optional)
     * @param sortOpsOrderBy Ascending or descending ordering of results. (optional, default to ASCENDING)
     * @param afterOpsTimestamp Timestamp provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param afterOpsChangeID Change ID provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param limit Number of results to return. (optional, default to 25)
     * @param offset Record position at which to start returning results. (optional, default to 0)
     * @return ApiResponse&lt;V1AuditResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1AuditResponse> auditServiceListAuditEventsWithHttpInfo(String filterOpsAccountID, String filterOpsContextChangeID, String filterOpsContextRequestID, String filterOpsContextTraceID, String filterOpsContextSessionID, String filterOpsContextActor, String filterOpsContextActorType, String filterOpsContextAccessType, String filterOpsContextIpAddress, String filterOpsContextOrigin, String filterOpsContextAuthMode, String filterOpsContextJwtID, String filterOpsContextBearerTokenContextID, String filterOpsParentAccountID, String filterOpsWorkspaceID, String filterOpsVaultID, String filterOpsResourceIDs, String filterOpsActionType, String filterOpsResourceType, String filterOpsTags, Integer filterOpsResponseCode, String filterOpsStartTime, String filterOpsEndTime, String filterOpsApiName, String filterOpsResponseMessage, String filterOpsHttpMethod, String filterOpsHttpURI, String sortOpsSortBy, String sortOpsOrderBy, String afterOpsTimestamp, String afterOpsChangeID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = auditServiceListAuditEventsValidateBeforeCall(filterOpsAccountID, filterOpsContextChangeID, filterOpsContextRequestID, filterOpsContextTraceID, filterOpsContextSessionID, filterOpsContextActor, filterOpsContextActorType, filterOpsContextAccessType, filterOpsContextIpAddress, filterOpsContextOrigin, filterOpsContextAuthMode, filterOpsContextJwtID, filterOpsContextBearerTokenContextID, filterOpsParentAccountID, filterOpsWorkspaceID, filterOpsVaultID, filterOpsResourceIDs, filterOpsActionType, filterOpsResourceType, filterOpsTags, filterOpsResponseCode, filterOpsStartTime, filterOpsEndTime, filterOpsApiName, filterOpsResponseMessage, filterOpsHttpMethod, filterOpsHttpURI, sortOpsSortBy, sortOpsOrderBy, afterOpsTimestamp, afterOpsChangeID, limit, offset, null);
        Type localVarReturnType = new TypeToken<V1AuditResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Audit Events (asynchronously)
     * Lists audit events that match query parameters.
     * @param filterOpsAccountID Resources with the specified account ID. (required)
     * @param filterOpsContextChangeID ID for the audit event. (optional)
     * @param filterOpsContextRequestID ID for the request that caused the event. (optional)
     * @param filterOpsContextTraceID ID for the request set by the service that received the request. (optional)
     * @param filterOpsContextSessionID ID for the session in which the request was sent. (optional)
     * @param filterOpsContextActor Member who sent the request. Depending on &#x60;actorType&#x60;, this may be a user ID or a service account ID. (optional)
     * @param filterOpsContextActorType Type of member who sent the request. (optional, default to NONE)
     * @param filterOpsContextAccessType Type of access for the request. (optional, default to ACCESS_NONE)
     * @param filterOpsContextIpAddress IP Address of the client that made the request. (optional)
     * @param filterOpsContextOrigin HTTP Origin request header (including scheme, hostname, and port) of the request. (optional)
     * @param filterOpsContextAuthMode Authentication mode the &#x60;actor&#x60; used. (optional, default to AUTH_NONE)
     * @param filterOpsContextJwtID ID of the JWT token. (optional)
     * @param filterOpsContextBearerTokenContextID Embedded User Context. (optional)
     * @param filterOpsParentAccountID Resources with the specified parent account ID. (optional)
     * @param filterOpsWorkspaceID Resources with the specified workspace ID. (optional)
     * @param filterOpsVaultID Resources with the specified vault ID. (optional)
     * @param filterOpsResourceIDs Resources with a specified ID. If a resource matches at least one ID, the associated event is returned. Format is a comma-separated list of \&quot;\\&lt;resourceType\\&gt;/\\&lt;resourceID\\&gt;\&quot;. For example, \&quot;VAULT/12345, USER/67890\&quot;. (optional)
     * @param filterOpsActionType Events with the specified action type. (optional, default to NONE)
     * @param filterOpsResourceType Resources with the specified type. (optional, default to NONE_API)
     * @param filterOpsTags Events with associated tags. If an event matches at least one tag, the event is returned. Comma-separated list. For example, \&quot;login, get\&quot;. (optional)
     * @param filterOpsResponseCode HTTP response code of the request. (optional)
     * @param filterOpsStartTime Start timestamp for the query, in SQL format. (optional)
     * @param filterOpsEndTime End timestamp for the query, in SQL format. (optional)
     * @param filterOpsApiName Name of the API called in the request. (optional)
     * @param filterOpsResponseMessage Response message of the request. (optional)
     * @param filterOpsHttpMethod HTTP method of the request. (optional)
     * @param filterOpsHttpURI HTTP URI of the request. (optional)
     * @param sortOpsSortBy Fully-qualified field by which to sort results. Field names should be in camel case (for example, \&quot;capitalization.camelCase\&quot;). (optional)
     * @param sortOpsOrderBy Ascending or descending ordering of results. (optional, default to ASCENDING)
     * @param afterOpsTimestamp Timestamp provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param afterOpsChangeID Change ID provided in the previous audit response&#39;s &#x60;nextOps&#x60; attribute. An alternate way to manage response pagination. Can&#39;t be used with &#x60;sortOps&#x60; or &#x60;offset&#x60;. For the first request in a series of audit requests, leave blank. (optional)
     * @param limit Number of results to return. (optional, default to 25)
     * @param offset Record position at which to start returning results. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServiceListAuditEventsAsync(String filterOpsAccountID, String filterOpsContextChangeID, String filterOpsContextRequestID, String filterOpsContextTraceID, String filterOpsContextSessionID, String filterOpsContextActor, String filterOpsContextActorType, String filterOpsContextAccessType, String filterOpsContextIpAddress, String filterOpsContextOrigin, String filterOpsContextAuthMode, String filterOpsContextJwtID, String filterOpsContextBearerTokenContextID, String filterOpsParentAccountID, String filterOpsWorkspaceID, String filterOpsVaultID, String filterOpsResourceIDs, String filterOpsActionType, String filterOpsResourceType, String filterOpsTags, Integer filterOpsResponseCode, String filterOpsStartTime, String filterOpsEndTime, String filterOpsApiName, String filterOpsResponseMessage, String filterOpsHttpMethod, String filterOpsHttpURI, String sortOpsSortBy, String sortOpsOrderBy, String afterOpsTimestamp, String afterOpsChangeID, Long limit, Long offset, final ApiCallback<V1AuditResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditServiceListAuditEventsValidateBeforeCall(filterOpsAccountID, filterOpsContextChangeID, filterOpsContextRequestID, filterOpsContextTraceID, filterOpsContextSessionID, filterOpsContextActor, filterOpsContextActorType, filterOpsContextAccessType, filterOpsContextIpAddress, filterOpsContextOrigin, filterOpsContextAuthMode, filterOpsContextJwtID, filterOpsContextBearerTokenContextID, filterOpsParentAccountID, filterOpsWorkspaceID, filterOpsVaultID, filterOpsResourceIDs, filterOpsActionType, filterOpsResourceType, filterOpsTags, filterOpsResponseCode, filterOpsStartTime, filterOpsEndTime, filterOpsApiName, filterOpsResponseMessage, filterOpsHttpMethod, filterOpsHttpURI, sortOpsSortBy, sortOpsOrderBy, afterOpsTimestamp, afterOpsChangeID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<V1AuditResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
