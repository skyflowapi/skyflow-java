/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.api;

import com.skyflow.generated.rest.ApiCallback;
import com.skyflow.generated.rest.ApiClient;
import com.skyflow.generated.rest.ApiException;
import com.skyflow.generated.rest.ApiResponse;
import com.skyflow.generated.rest.Configuration;
import com.skyflow.generated.rest.Pair;
import com.skyflow.generated.rest.ProgressRequestBody;
import com.skyflow.generated.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.skyflow.generated.rest.models.GooglerpcStatus;
import com.skyflow.generated.rest.models.RecordServiceBatchOperationBody;
import com.skyflow.generated.rest.models.RecordServiceBulkDeleteRecordBody;
import com.skyflow.generated.rest.models.RecordServiceInsertRecordBody;
import com.skyflow.generated.rest.models.RecordServiceUpdateRecordBody;
import com.skyflow.generated.rest.models.V1BatchOperationResponse;
import com.skyflow.generated.rest.models.V1BulkDeleteRecordResponse;
import com.skyflow.generated.rest.models.V1BulkGetRecordResponse;
import com.skyflow.generated.rest.models.V1DeleteFileResponse;
import com.skyflow.generated.rest.models.V1DeleteRecordResponse;
import com.skyflow.generated.rest.models.V1FieldRecords;
import com.skyflow.generated.rest.models.V1GetFileScanStatusResponse;
import com.skyflow.generated.rest.models.V1InsertRecordResponse;
import com.skyflow.generated.rest.models.V1UpdateRecordResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fileServiceDeleteFile
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceDeleteFileCall(String vaultID, String tableName, String ID, String columnName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{tableName}/{ID}/files/{columnName}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceDeleteFileValidateBeforeCall(String vaultID, String tableName, String ID, String columnName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling fileServiceDeleteFile(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling fileServiceDeleteFile(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling fileServiceDeleteFile(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling fileServiceDeleteFile(Async)");
        }

        return fileServiceDeleteFileCall(vaultID, tableName, ID, columnName, _callback);

    }

    /**
     * Delete File
     * Deletes a file from the specified record.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @return V1DeleteFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1DeleteFileResponse fileServiceDeleteFile(String vaultID, String tableName, String ID, String columnName) throws ApiException {
        ApiResponse<V1DeleteFileResponse> localVarResp = fileServiceDeleteFileWithHttpInfo(vaultID, tableName, ID, columnName);
        return localVarResp.getData();
    }

    /**
     * Delete File
     * Deletes a file from the specified record.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @return ApiResponse&lt;V1DeleteFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeleteFileResponse> fileServiceDeleteFileWithHttpInfo(String vaultID, String tableName, String ID, String columnName) throws ApiException {
        okhttp3.Call localVarCall = fileServiceDeleteFileValidateBeforeCall(vaultID, tableName, ID, columnName, null);
        Type localVarReturnType = new TypeToken<V1DeleteFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete File (asynchronously)
     * Deletes a file from the specified record.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceDeleteFileAsync(String vaultID, String tableName, String ID, String columnName, final ApiCallback<V1DeleteFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceDeleteFileValidateBeforeCall(vaultID, tableName, ID, columnName, _callback);
        Type localVarReturnType = new TypeToken<V1DeleteFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceGetFileScanStatus
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileScanStatusCall(String vaultID, String tableName, String ID, String columnName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{tableName}/{ID}/files/{columnName}/scan-status"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "tableName" + "}", localVarApiClient.escapeString(tableName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "columnName" + "}", localVarApiClient.escapeString(columnName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceGetFileScanStatusValidateBeforeCall(String vaultID, String tableName, String ID, String columnName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling fileServiceGetFileScanStatus(Async)");
        }

        // verify the required parameter 'tableName' is set
        if (tableName == null) {
            throw new ApiException("Missing the required parameter 'tableName' when calling fileServiceGetFileScanStatus(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling fileServiceGetFileScanStatus(Async)");
        }

        // verify the required parameter 'columnName' is set
        if (columnName == null) {
            throw new ApiException("Missing the required parameter 'columnName' when calling fileServiceGetFileScanStatus(Async)");
        }

        return fileServiceGetFileScanStatusCall(vaultID, tableName, ID, columnName, _callback);

    }

    /**
     * Get File Scan Status
     * Returns the anti-virus scan status of a file.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @return V1GetFileScanStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1GetFileScanStatusResponse fileServiceGetFileScanStatus(String vaultID, String tableName, String ID, String columnName) throws ApiException {
        ApiResponse<V1GetFileScanStatusResponse> localVarResp = fileServiceGetFileScanStatusWithHttpInfo(vaultID, tableName, ID, columnName);
        return localVarResp.getData();
    }

    /**
     * Get File Scan Status
     * Returns the anti-virus scan status of a file.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @return ApiResponse&lt;V1GetFileScanStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1GetFileScanStatusResponse> fileServiceGetFileScanStatusWithHttpInfo(String vaultID, String tableName, String ID, String columnName) throws ApiException {
        okhttp3.Call localVarCall = fileServiceGetFileScanStatusValidateBeforeCall(vaultID, tableName, ID, columnName, null);
        Type localVarReturnType = new TypeToken<V1GetFileScanStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File Scan Status (asynchronously)
     * Returns the anti-virus scan status of a file.
     * @param vaultID ID of the vault. (required)
     * @param tableName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param columnName Name of the column that contains the file. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceGetFileScanStatusAsync(String vaultID, String tableName, String ID, String columnName, final ApiCallback<V1GetFileScanStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceGetFileScanStatusValidateBeforeCall(vaultID, tableName, ID, columnName, _callback);
        Type localVarReturnType = new TypeToken<V1GetFileScanStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fileServiceUploadFile
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param fileColumnName Name of the column to store the file in. The column must have a file data type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceUploadFileCall(String vaultID, String objectName, String ID, File fileColumnName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}/{ID}/files"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileColumnName != null) {
            localVarFormParams.put("fileColumnName", fileColumnName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fileServiceUploadFileValidateBeforeCall(String vaultID, String objectName, String ID, File fileColumnName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling fileServiceUploadFile(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling fileServiceUploadFile(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling fileServiceUploadFile(Async)");
        }

        return fileServiceUploadFileCall(vaultID, objectName, ID, fileColumnName, _callback);

    }

    /**
     * Upload File
     * Uploads a file to the specified record.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param fileColumnName Name of the column to store the file in. The column must have a file data type. (optional)
     * @return V1UpdateRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1UpdateRecordResponse fileServiceUploadFile(String vaultID, String objectName, String ID, File fileColumnName) throws ApiException {
        ApiResponse<V1UpdateRecordResponse> localVarResp = fileServiceUploadFileWithHttpInfo(vaultID, objectName, ID, fileColumnName);
        return localVarResp.getData();
    }

    /**
     * Upload File
     * Uploads a file to the specified record.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param fileColumnName Name of the column to store the file in. The column must have a file data type. (optional)
     * @return ApiResponse&lt;V1UpdateRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1UpdateRecordResponse> fileServiceUploadFileWithHttpInfo(String vaultID, String objectName, String ID, File fileColumnName) throws ApiException {
        okhttp3.Call localVarCall = fileServiceUploadFileValidateBeforeCall(vaultID, objectName, ID, fileColumnName, null);
        Type localVarReturnType = new TypeToken<V1UpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload File (asynchronously)
     * Uploads a file to the specified record.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param fileColumnName Name of the column to store the file in. The column must have a file data type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fileServiceUploadFileAsync(String vaultID, String objectName, String ID, File fileColumnName, final ApiCallback<V1UpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fileServiceUploadFileValidateBeforeCall(vaultID, objectName, ID, fileColumnName, _callback);
        Type localVarReturnType = new TypeToken<V1UpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceBatchOperation
     * @param vaultID ID of the vault. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBatchOperationCall(String vaultID, RecordServiceBatchOperationBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceBatchOperationValidateBeforeCall(String vaultID, RecordServiceBatchOperationBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceBatchOperation(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recordServiceBatchOperation(Async)");
        }

        return recordServiceBatchOperationCall(vaultID, body, _callback);

    }

    /**
     * Batch Operation
     * Performs multiple record operations in a single transaction.
     * @param vaultID ID of the vault. (required)
     * @param body  (required)
     * @return V1BatchOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1BatchOperationResponse recordServiceBatchOperation(String vaultID, RecordServiceBatchOperationBody body) throws ApiException {
        ApiResponse<V1BatchOperationResponse> localVarResp = recordServiceBatchOperationWithHttpInfo(vaultID, body);
        return localVarResp.getData();
    }

    /**
     * Batch Operation
     * Performs multiple record operations in a single transaction.
     * @param vaultID ID of the vault. (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1BatchOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1BatchOperationResponse> recordServiceBatchOperationWithHttpInfo(String vaultID, RecordServiceBatchOperationBody body) throws ApiException {
        okhttp3.Call localVarCall = recordServiceBatchOperationValidateBeforeCall(vaultID, body, null);
        Type localVarReturnType = new TypeToken<V1BatchOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Batch Operation (asynchronously)
     * Performs multiple record operations in a single transaction.
     * @param vaultID ID of the vault. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBatchOperationAsync(String vaultID, RecordServiceBatchOperationBody body, final ApiCallback<V1BatchOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceBatchOperationValidateBeforeCall(vaultID, body, _callback);
        Type localVarReturnType = new TypeToken<V1BatchOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceBulkDeleteRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBulkDeleteRecordCall(String vaultID, String objectName, RecordServiceBulkDeleteRecordBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceBulkDeleteRecordValidateBeforeCall(String vaultID, String objectName, RecordServiceBulkDeleteRecordBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceBulkDeleteRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceBulkDeleteRecord(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recordServiceBulkDeleteRecord(Async)");
        }

        return recordServiceBulkDeleteRecordCall(vaultID, objectName, body, _callback);

    }

    /**
     * Bulk Delete Records
     * Deletes the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @return V1BulkDeleteRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1BulkDeleteRecordResponse recordServiceBulkDeleteRecord(String vaultID, String objectName, RecordServiceBulkDeleteRecordBody body) throws ApiException {
        ApiResponse<V1BulkDeleteRecordResponse> localVarResp = recordServiceBulkDeleteRecordWithHttpInfo(vaultID, objectName, body);
        return localVarResp.getData();
    }

    /**
     * Bulk Delete Records
     * Deletes the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1BulkDeleteRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1BulkDeleteRecordResponse> recordServiceBulkDeleteRecordWithHttpInfo(String vaultID, String objectName, RecordServiceBulkDeleteRecordBody body) throws ApiException {
        okhttp3.Call localVarCall = recordServiceBulkDeleteRecordValidateBeforeCall(vaultID, objectName, body, null);
        Type localVarReturnType = new TypeToken<V1BulkDeleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Delete Records (asynchronously)
     * Deletes the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBulkDeleteRecordAsync(String vaultID, String objectName, RecordServiceBulkDeleteRecordBody body, final ApiCallback<V1BulkDeleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceBulkDeleteRecordValidateBeforeCall(vaultID, objectName, body, _callback);
        Type localVarReturnType = new TypeToken<V1BulkDeleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceBulkGetRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table that contains the records. (required)
     * @param skyflowIds &#x60;skyflow_id&#x60; values of the records to return, with one value per &#x60;skyflow_ids&#x60; URL parameter. For example, &#x60;?skyflow_ids&#x3D;abc&amp;skyflow_ids&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns the first 25 records in the table. (optional)
     * @param redaction Redaction level to enforce for the returned records. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param offset Record position at which to start receiving data. (optional, default to 0)
     * @param limit Number of record to return. Maximum 25. (optional, default to 25)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param columnName Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param columnValues Column values of the records to return, with one value per &#x60;column_values&#x60; URL parameter. For example, &#x60;?column_values&#x3D;abc&amp;column_values&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;&#x60;column_name&#x60; is mandatory when providing &#x60;column_values&#x60;. If you use column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param orderBy Order to return records, based on &#x60;skyflow_id&#x60; values. To disable, set to &#x60;NONE&#x60;. (optional, default to ASCENDING)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBulkGetRecordCall(String vaultID, String objectName, List<String> skyflowIds, String redaction, Boolean tokenization, List<String> fields, String offset, String limit, Boolean downloadURL, String columnName, List<String> columnValues, String orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skyflowIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "skyflow_ids", skyflowIds));
        }

        if (redaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redaction", redaction));
        }

        if (tokenization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenization", tokenization));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (downloadURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadURL", downloadURL));
        }

        if (columnName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("column_name", columnName));
        }

        if (columnValues != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "column_values", columnValues));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceBulkGetRecordValidateBeforeCall(String vaultID, String objectName, List<String> skyflowIds, String redaction, Boolean tokenization, List<String> fields, String offset, String limit, Boolean downloadURL, String columnName, List<String> columnValues, String orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceBulkGetRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceBulkGetRecord(Async)");
        }

        return recordServiceBulkGetRecordCall(vaultID, objectName, skyflowIds, redaction, tokenization, fields, offset, limit, downloadURL, columnName, columnValues, orderBy, _callback);

    }

    /**
     * Get Record(s)
     * Gets the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table that contains the records. (required)
     * @param skyflowIds &#x60;skyflow_id&#x60; values of the records to return, with one value per &#x60;skyflow_ids&#x60; URL parameter. For example, &#x60;?skyflow_ids&#x3D;abc&amp;skyflow_ids&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns the first 25 records in the table. (optional)
     * @param redaction Redaction level to enforce for the returned records. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param offset Record position at which to start receiving data. (optional, default to 0)
     * @param limit Number of record to return. Maximum 25. (optional, default to 25)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param columnName Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param columnValues Column values of the records to return, with one value per &#x60;column_values&#x60; URL parameter. For example, &#x60;?column_values&#x3D;abc&amp;column_values&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;&#x60;column_name&#x60; is mandatory when providing &#x60;column_values&#x60;. If you use column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param orderBy Order to return records, based on &#x60;skyflow_id&#x60; values. To disable, set to &#x60;NONE&#x60;. (optional, default to ASCENDING)
     * @return V1BulkGetRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1BulkGetRecordResponse recordServiceBulkGetRecord(String vaultID, String objectName, List<String> skyflowIds, String redaction, Boolean tokenization, List<String> fields, String offset, String limit, Boolean downloadURL, String columnName, List<String> columnValues, String orderBy) throws ApiException {
        ApiResponse<V1BulkGetRecordResponse> localVarResp = recordServiceBulkGetRecordWithHttpInfo(vaultID, objectName, skyflowIds, redaction, tokenization, fields, offset, limit, downloadURL, columnName, columnValues, orderBy);
        return localVarResp.getData();
    }

    /**
     * Get Record(s)
     * Gets the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table that contains the records. (required)
     * @param skyflowIds &#x60;skyflow_id&#x60; values of the records to return, with one value per &#x60;skyflow_ids&#x60; URL parameter. For example, &#x60;?skyflow_ids&#x3D;abc&amp;skyflow_ids&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns the first 25 records in the table. (optional)
     * @param redaction Redaction level to enforce for the returned records. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param offset Record position at which to start receiving data. (optional, default to 0)
     * @param limit Number of record to return. Maximum 25. (optional, default to 25)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param columnName Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param columnValues Column values of the records to return, with one value per &#x60;column_values&#x60; URL parameter. For example, &#x60;?column_values&#x3D;abc&amp;column_values&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;&#x60;column_name&#x60; is mandatory when providing &#x60;column_values&#x60;. If you use column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param orderBy Order to return records, based on &#x60;skyflow_id&#x60; values. To disable, set to &#x60;NONE&#x60;. (optional, default to ASCENDING)
     * @return ApiResponse&lt;V1BulkGetRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1BulkGetRecordResponse> recordServiceBulkGetRecordWithHttpInfo(String vaultID, String objectName, List<String> skyflowIds, String redaction, Boolean tokenization, List<String> fields, String offset, String limit, Boolean downloadURL, String columnName, List<String> columnValues, String orderBy) throws ApiException {
        okhttp3.Call localVarCall = recordServiceBulkGetRecordValidateBeforeCall(vaultID, objectName, skyflowIds, redaction, tokenization, fields, offset, limit, downloadURL, columnName, columnValues, orderBy, null);
        Type localVarReturnType = new TypeToken<V1BulkGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Record(s) (asynchronously)
     * Gets the specified records from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table that contains the records. (required)
     * @param skyflowIds &#x60;skyflow_id&#x60; values of the records to return, with one value per &#x60;skyflow_ids&#x60; URL parameter. For example, &#x60;?skyflow_ids&#x3D;abc&amp;skyflow_ids&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns the first 25 records in the table. (optional)
     * @param redaction Redaction level to enforce for the returned records. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param offset Record position at which to start receiving data. (optional, default to 0)
     * @param limit Number of record to return. Maximum 25. (optional, default to 25)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param columnName Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param columnValues Column values of the records to return, with one value per &#x60;column_values&#x60; URL parameter. For example, &#x60;?column_values&#x3D;abc&amp;column_values&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;&#x60;column_name&#x60; is mandatory when providing &#x60;column_values&#x60;. If you use column name or column value, you cannot use &#x60;skyflow_ids&#x60;. Passing either of these parameters with &#x60;skyflow_ids&#x60; returns an error. (optional)
     * @param orderBy Order to return records, based on &#x60;skyflow_id&#x60; values. To disable, set to &#x60;NONE&#x60;. (optional, default to ASCENDING)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceBulkGetRecordAsync(String vaultID, String objectName, List<String> skyflowIds, String redaction, Boolean tokenization, List<String> fields, String offset, String limit, Boolean downloadURL, String columnName, List<String> columnValues, String orderBy, final ApiCallback<V1BulkGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceBulkGetRecordValidateBeforeCall(vaultID, objectName, skyflowIds, redaction, tokenization, fields, offset, limit, downloadURL, columnName, columnValues, orderBy, _callback);
        Type localVarReturnType = new TypeToken<V1BulkGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceDeleteRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceDeleteRecordCall(String vaultID, String objectName, String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}/{ID}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceDeleteRecordValidateBeforeCall(String vaultID, String objectName, String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceDeleteRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceDeleteRecord(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling recordServiceDeleteRecord(Async)");
        }

        return recordServiceDeleteRecordCall(vaultID, objectName, ID, _callback);

    }

    /**
     * Delete Record
     * Deletes the specified record from a table.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This method doesn&#39;t delete transient field tokens. Transient field values are available until they expire based on the fields&#39; time-to-live (TTL) setting.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record to delete. (required)
     * @return V1DeleteRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1DeleteRecordResponse recordServiceDeleteRecord(String vaultID, String objectName, String ID) throws ApiException {
        ApiResponse<V1DeleteRecordResponse> localVarResp = recordServiceDeleteRecordWithHttpInfo(vaultID, objectName, ID);
        return localVarResp.getData();
    }

    /**
     * Delete Record
     * Deletes the specified record from a table.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This method doesn&#39;t delete transient field tokens. Transient field values are available until they expire based on the fields&#39; time-to-live (TTL) setting.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record to delete. (required)
     * @return ApiResponse&lt;V1DeleteRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1DeleteRecordResponse> recordServiceDeleteRecordWithHttpInfo(String vaultID, String objectName, String ID) throws ApiException {
        okhttp3.Call localVarCall = recordServiceDeleteRecordValidateBeforeCall(vaultID, objectName, ID, null);
        Type localVarReturnType = new TypeToken<V1DeleteRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Record (asynchronously)
     * Deletes the specified record from a table.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Note:&lt;/b&gt; This method doesn&#39;t delete transient field tokens. Transient field values are available until they expire based on the fields&#39; time-to-live (TTL) setting.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceDeleteRecordAsync(String vaultID, String objectName, String ID, final ApiCallback<V1DeleteRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceDeleteRecordValidateBeforeCall(vaultID, objectName, ID, _callback);
        Type localVarReturnType = new TypeToken<V1DeleteRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceGetRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param redaction Redaction level to enforce for the returned record. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceGetRecordCall(String vaultID, String objectName, String ID, String redaction, Boolean tokenization, List<String> fields, Boolean downloadURL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}/{ID}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redaction", redaction));
        }

        if (tokenization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenization", tokenization));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (downloadURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downloadURL", downloadURL));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceGetRecordValidateBeforeCall(String vaultID, String objectName, String ID, String redaction, Boolean tokenization, List<String> fields, Boolean downloadURL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceGetRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceGetRecord(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling recordServiceGetRecord(Async)");
        }

        return recordServiceGetRecordCall(vaultID, objectName, ID, redaction, tokenization, fields, downloadURL, _callback);

    }

    /**
     * Get Record By ID
     * Returns the specified record from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param redaction Redaction level to enforce for the returned record. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @return V1FieldRecords
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1FieldRecords recordServiceGetRecord(String vaultID, String objectName, String ID, String redaction, Boolean tokenization, List<String> fields, Boolean downloadURL) throws ApiException {
        ApiResponse<V1FieldRecords> localVarResp = recordServiceGetRecordWithHttpInfo(vaultID, objectName, ID, redaction, tokenization, fields, downloadURL);
        return localVarResp.getData();
    }

    /**
     * Get Record By ID
     * Returns the specified record from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param redaction Redaction level to enforce for the returned record. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @return ApiResponse&lt;V1FieldRecords&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1FieldRecords> recordServiceGetRecordWithHttpInfo(String vaultID, String objectName, String ID, String redaction, Boolean tokenization, List<String> fields, Boolean downloadURL) throws ApiException {
        okhttp3.Call localVarCall = recordServiceGetRecordValidateBeforeCall(vaultID, objectName, ID, redaction, tokenization, fields, downloadURL, null);
        Type localVarReturnType = new TypeToken<V1FieldRecords>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Record By ID (asynchronously)
     * Returns the specified record from a table.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param redaction Redaction level to enforce for the returned record. Subject to policies assigned to the API caller. (optional, default to DEFAULT)
     * @param tokenization If &#x60;true&#x60;, this operation returns tokens for fields with tokenization enabled. Only applicable if &#x60;skyflow_id&#x60; values are specified. (optional)
     * @param fields Fields to return for the record, with one value per &#x60;fields&#x60; URL parameter. For example, &#x60;?fields&#x3D;abc&amp;fields&#x3D;123&#x60;.&lt;br /&gt;&lt;br /&gt;If not specified, returns all fields. (optional)
     * @param downloadURL If &#x60;true&#x60;, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceGetRecordAsync(String vaultID, String objectName, String ID, String redaction, Boolean tokenization, List<String> fields, Boolean downloadURL, final ApiCallback<V1FieldRecords> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceGetRecordValidateBeforeCall(vaultID, objectName, ID, redaction, tokenization, fields, downloadURL, _callback);
        Type localVarReturnType = new TypeToken<V1FieldRecords>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceInsertRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceInsertRecordCall(String vaultID, String objectName, RecordServiceInsertRecordBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceInsertRecordValidateBeforeCall(String vaultID, String objectName, RecordServiceInsertRecordBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceInsertRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceInsertRecord(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recordServiceInsertRecord(Async)");
        }

        return recordServiceInsertRecordCall(vaultID, objectName, body, _callback);

    }

    /**
     * Insert Records
     * Inserts a record in the specified table.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.&lt;br /&gt;&lt;br /&gt;Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @return V1InsertRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1InsertRecordResponse recordServiceInsertRecord(String vaultID, String objectName, RecordServiceInsertRecordBody body) throws ApiException {
        ApiResponse<V1InsertRecordResponse> localVarResp = recordServiceInsertRecordWithHttpInfo(vaultID, objectName, body);
        return localVarResp.getData();
    }

    /**
     * Insert Records
     * Inserts a record in the specified table.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.&lt;br /&gt;&lt;br /&gt;Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1InsertRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1InsertRecordResponse> recordServiceInsertRecordWithHttpInfo(String vaultID, String objectName, RecordServiceInsertRecordBody body) throws ApiException {
        okhttp3.Call localVarCall = recordServiceInsertRecordValidateBeforeCall(vaultID, objectName, body, null);
        Type localVarReturnType = new TypeToken<V1InsertRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert Records (asynchronously)
     * Inserts a record in the specified table.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.&lt;br /&gt;&lt;br /&gt;Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceInsertRecordAsync(String vaultID, String objectName, RecordServiceInsertRecordBody body, final ApiCallback<V1InsertRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceInsertRecordValidateBeforeCall(vaultID, objectName, body, _callback);
        Type localVarReturnType = new TypeToken<V1InsertRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recordServiceUpdateRecord
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceUpdateRecordCall(String vaultID, String objectName, String ID, RecordServiceUpdateRecordBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/vaults/{vaultID}/{objectName}/{ID}"
            .replace("{" + "vaultID" + "}", localVarApiClient.escapeString(vaultID.toString()))
            .replace("{" + "objectName" + "}", localVarApiClient.escapeString(objectName.toString()))
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordServiceUpdateRecordValidateBeforeCall(String vaultID, String objectName, String ID, RecordServiceUpdateRecordBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vaultID' is set
        if (vaultID == null) {
            throw new ApiException("Missing the required parameter 'vaultID' when calling recordServiceUpdateRecord(Async)");
        }

        // verify the required parameter 'objectName' is set
        if (objectName == null) {
            throw new ApiException("Missing the required parameter 'objectName' when calling recordServiceUpdateRecord(Async)");
        }

        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling recordServiceUpdateRecord(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling recordServiceUpdateRecord(Async)");
        }

        return recordServiceUpdateRecordCall(vaultID, objectName, ID, body, _callback);

    }

    /**
     * Update Record
     * Updates the specified record in a table.&lt;br /&gt;&lt;br /&gt;When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn&#39;t included, it&#39;s removed.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field resets when the field value is updated.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param body  (required)
     * @return V1UpdateRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public V1UpdateRecordResponse recordServiceUpdateRecord(String vaultID, String objectName, String ID, RecordServiceUpdateRecordBody body) throws ApiException {
        ApiResponse<V1UpdateRecordResponse> localVarResp = recordServiceUpdateRecordWithHttpInfo(vaultID, objectName, ID, body);
        return localVarResp.getData();
    }

    /**
     * Update Record
     * Updates the specified record in a table.&lt;br /&gt;&lt;br /&gt;When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn&#39;t included, it&#39;s removed.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field resets when the field value is updated.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1UpdateRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1UpdateRecordResponse> recordServiceUpdateRecordWithHttpInfo(String vaultID, String objectName, String ID, RecordServiceUpdateRecordBody body) throws ApiException {
        okhttp3.Call localVarCall = recordServiceUpdateRecordValidateBeforeCall(vaultID, objectName, ID, body, null);
        Type localVarReturnType = new TypeToken<V1UpdateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Record (asynchronously)
     * Updates the specified record in a table.&lt;br /&gt;&lt;br /&gt;When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn&#39;t included, it&#39;s removed.&lt;br /&gt;&lt;br /&gt;The time-to-live (TTL) for a transient field resets when the field value is updated.
     * @param vaultID ID of the vault. (required)
     * @param objectName Name of the table. (required)
     * @param ID &#x60;skyflow_id&#x60; of the record. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned when the resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recordServiceUpdateRecordAsync(String vaultID, String objectName, String ID, RecordServiceUpdateRecordBody body, final ApiCallback<V1UpdateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordServiceUpdateRecordValidateBeforeCall(vaultID, objectName, ID, body, _callback);
        Type localVarReturnType = new TypeToken<V1UpdateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
