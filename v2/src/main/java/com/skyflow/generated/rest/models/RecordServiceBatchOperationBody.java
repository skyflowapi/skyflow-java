/*
 * Skyflow Data API
 * # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://_*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://_*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@skyflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.skyflow.generated.rest.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.skyflow.generated.rest.models.V1BYOT;
import com.skyflow.generated.rest.models.V1BatchRecord;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.skyflow.generated.rest.JSON;

/**
 * RecordServiceBatchOperationBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-25T11:34:22.684345+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
public class RecordServiceBatchOperationBody {
  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<V1BatchRecord> records = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTINUE_ON_ERROR = "continueOnError";
  @SerializedName(SERIALIZED_NAME_CONTINUE_ON_ERROR)
  private Boolean continueOnError;

  public static final String SERIALIZED_NAME_BYOT = "byot";
  @SerializedName(SERIALIZED_NAME_BYOT)
  private V1BYOT byot = V1BYOT.DISABLE;

  public RecordServiceBatchOperationBody() {
  }

  public RecordServiceBatchOperationBody records(List<V1BatchRecord> records) {
    this.records = records;
    return this;
  }

  public RecordServiceBatchOperationBody addRecordsItem(V1BatchRecord recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

  /**
   * Record operations to perform.
   * @return records
   */
  @javax.annotation.Nullable
  public List<V1BatchRecord> getRecords() {
    return records;
  }

  public void setRecords(List<V1BatchRecord> records) {
    this.records = records;
  }


  public RecordServiceBatchOperationBody continueOnError(Boolean continueOnError) {
    this.continueOnError = continueOnError;
    return this;
  }

  /**
   * Continue performing operations on partial errors.
   * @return continueOnError
   */
  @javax.annotation.Nullable
  public Boolean getContinueOnError() {
    return continueOnError;
  }

  public void setContinueOnError(Boolean continueOnError) {
    this.continueOnError = continueOnError;
  }


  public RecordServiceBatchOperationBody byot(V1BYOT byot) {
    this.byot = byot;
    return this;
  }

  /**
   * Get byot
   * @return byot
   */
  @javax.annotation.Nullable
  public V1BYOT getByot() {
    return byot;
  }

  public void setByot(V1BYOT byot) {
    this.byot = byot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordServiceBatchOperationBody recordServiceBatchOperationBody = (RecordServiceBatchOperationBody) o;
    return Objects.equals(this.records, recordServiceBatchOperationBody.records) &&
        Objects.equals(this.continueOnError, recordServiceBatchOperationBody.continueOnError) &&
        Objects.equals(this.byot, recordServiceBatchOperationBody.byot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(records, continueOnError, byot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordServiceBatchOperationBody {\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    continueOnError: ").append(toIndentedString(continueOnError)).append("\n");
    sb.append("    byot: ").append(toIndentedString(byot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("records");
    openapiFields.add("continueOnError");
    openapiFields.add("byot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordServiceBatchOperationBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordServiceBatchOperationBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordServiceBatchOperationBody is not found in the empty JSON string", RecordServiceBatchOperationBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordServiceBatchOperationBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordServiceBatchOperationBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            V1BatchRecord.validateJsonElement(jsonArrayrecords.get(i));
          };
        }
      }
      // validate the optional field `byot`
      if (jsonObj.get("byot") != null && !jsonObj.get("byot").isJsonNull()) {
        V1BYOT.validateJsonElement(jsonObj.get("byot"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordServiceBatchOperationBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordServiceBatchOperationBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordServiceBatchOperationBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordServiceBatchOperationBody.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordServiceBatchOperationBody>() {
           @Override
           public void write(JsonWriter out, RecordServiceBatchOperationBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordServiceBatchOperationBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordServiceBatchOperationBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordServiceBatchOperationBody
   * @throws IOException if the JSON string is invalid with respect to RecordServiceBatchOperationBody
   */
  public static RecordServiceBatchOperationBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordServiceBatchOperationBody.class);
  }

  /**
   * Convert an instance of RecordServiceBatchOperationBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

